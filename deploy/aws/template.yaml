Parameters:
  TrainingInferenceUserDataScript:
    Type: String
    Default: |
      #!/bin/bash
      yum install -y expect
      sudo -u ec2-user bash <<EOF
      cd /home/ec2-user
      git clone https://github.com/ashleyholman/vqa.git
      cd vqa
      ./provision.sh
      EOF
  UseCPUSpotInstances:
    Type: String
    Default: true
    AllowedValues:
      - 'true'
      - 'false'
  UseGPUSpotInstances:
    Type: String
    Default: true
    AllowedValues:
      - 'true'
      - 'false'

Mappings:
  InstanceTypes:
    CPUOnly:
      Type: m5.xlarge
    GPU:
      Type: p3.2xlarge

Resources:
  VqaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: vqa-ap-southeast-1

  VqaWebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: vqa-web

  VQAWebBucketOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access Identity for VqaWebBucket

  VqaWebBucketPolicyOAI:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VqaWebBucket
      PolicyDocument:
        Statement:
        - Sid: PublicReadGetObject
          Effect: Allow
          Principal:
            CanonicalUser: !GetAtt VQAWebBucketOriginAccessIdentity.S3CanonicalUserId
          Action:
          - s3:GetObject
          Resource:
          - Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - !Ref VqaWebBucket
              - "/*"

  VqaCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - DomainName: !GetAtt VqaWebBucket.RegionalDomainName
            Id: VqaWebBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${VQAWebBucketOriginAccessIdentity}
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          TargetOriginId: VqaWebBucket
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 1200
          DefaultTTL: 1200
          MaxTTL: 1200
        CacheBehaviors:
          - PathPattern: "/data/*.json"
            MinTTL: 1
            DefaultTTL: 1
            MaxTTL: 1
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            TargetOriginId: VqaWebBucket
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          - PathPattern: "/*.html"
            MinTTL: 5
            DefaultTTL: 5
            MaxTTL: 5
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            TargetOriginId: VqaWebBucket
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          - PathPattern: "/static/*"
            MinTTL: 86400
            DefaultTTL: 86400
            MaxTTL: 31536000
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            TargetOriginId: VqaWebBucket
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

  VQADynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: vqa
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI_PK
          AttributeType: S
        - AttributeName: GSI_SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: GSI
          KeySchema:
            - AttributeName: GSI_PK
              KeyType: HASH
            - AttributeName: GSI_SK
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
          Projection:
            ProjectionType: KEYS_ONLY

  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref VqaTrainingInferenceRole

  VqaTrainingInferenceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: >
        Role to assign EC2 instances used for training and inference.
        Used for reading datasets from S3, and reading and storing model weights
        for model snapshots.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: VqaTrainingInferenceS3Policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Resource:
            - !Sub arn:aws:s3:::${VqaBucket}/*
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource:
            - !Sub arn:aws:s3:::${VqaBucket}
      - PolicyName: VqaTrainingInferenceDynamoDBPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            Resource:
            - !GetAtt VQADynamoDBTable.Arn

  VQACPUOnlyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: vqa-cpuonly
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt MyInstanceProfile.Arn
        InstanceType: !FindInMap [InstanceTypes, CPUOnly, Type]
        ImageId: ami-0eea1b45aaf6b2809
        KeyName: vqa
        SecurityGroupIds:
        - !GetAtt VQATrainingInferenceSecurityGroup.GroupId
        InstanceMarketOptions:
          Fn::If:
            - UseCPUSpotInstancesCondition
            - MarketType: spot
            - !Ref 'AWS::NoValue'
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 150
        UserData:
          Fn::Base64: |
            #!/bin/bash
            yum install -y expect
            sudo -u ec2-user bash <<EOF
            cd /home/ec2-user
            git clone https://github.com/ashleyholman/vqa.git
            cd vqa
            ./provision.sh
            EOF

  VQACPUOnlyAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: ["ap-southeast-1a", "ap-southeast-1b"]
      MinSize: '0'
      MaxSize: '1'
      LaunchTemplate:
        LaunchTemplateId: !Ref VQACPUOnlyLaunchTemplate
        Version: !GetAtt VQACPUOnlyLaunchTemplate.LatestVersionNumber

  VQAGPULaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: vqa-gpu
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt MyInstanceProfile.Arn
        InstanceType: !FindInMap [InstanceTypes, GPU, Type]
        ImageId: ami-0eea1b45aaf6b2809
        KeyName: vqa
        SecurityGroupIds:
        - !GetAtt VQATrainingInferenceSecurityGroup.GroupId
        InstanceMarketOptions:
          Fn::If:
            - UseGPUSpotInstancesCondition
            - MarketType: spot
              SpotOptions:
                MaxPrice: "1.50"
            - !Ref 'AWS::NoValue'
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 150
        UserData:
          Fn::Base64: |
            #!/bin/bash
            yum install -y expect
            sudo -u ec2-user bash <<EOF
            cd /home/ec2-user
            git clone https://github.com/ashleyholman/vqa.git
            cd vqa
            ./provision.sh
            EOF

  VQAGPUAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: ["ap-southeast-1a", "ap-southeast-1b"]
      MinSize: '0'
      MinSize: '0'
      MaxSize: '1'
      LaunchTemplate:
        LaunchTemplateId: !Ref VQAGPULaunchTemplate
        Version: !GetAtt VQAGPULaunchTemplate.LatestVersionNumber

  VQATrainingInferenceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VQA instances
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

Outputs:
  CPUOnlyAutoScalingGroupName:
    Description: The name of the CPU-Only Auto Scaling Group
    Value: !Ref VQACPUOnlyAutoscalingGroup

  GPUAutoScalingGroupName:
    Description: The name of the GPU Auto Scaling Group
    Value: !Ref VQAGPUAutoscalingGroup

  WebsiteURL:
    Value: !GetAtt [VqaCloudFrontDistribution, DomainName]
    Description: URL for website hosted on S3

Conditions:
  UseCPUSpotInstancesCondition:
    Fn::Equals:
      - !Ref UseCPUSpotInstances
      - 'true'
  UseGPUSpotInstancesCondition:
    Fn::Equals:
      - !Ref UseGPUSpotInstances
      - 'true'
